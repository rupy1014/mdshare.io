"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(editor)/editor/page",{

/***/ "(app-pages-browser)/./src/lib/ai-service.ts":
/*!*******************************!*\
  !*** ./src/lib/ai-service.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIService: () => (/* binding */ AIService),\n/* harmony export */   aiService: () => (/* binding */ aiService)\n/* harmony export */ });\nclass AIService {\n    // 자동 태그 생성 (Mock 구현)\n    async generateTags(content, title) {\n        // 실제로는 OpenAI API를 사용하지만, 여기서는 Mock 구현\n        const mockTags = [];\n        // 키워드 기반 태그 생성\n        const keywords = this.extractKeywords(content + ' ' + title);\n        keywords.forEach((keyword)=>{\n            const confidence = Math.random() * 0.4 + 0.6 // 0.6-1.0\n            ;\n            mockTags.push({\n                tag: keyword,\n                confidence,\n                reason: '문서에서 \"'.concat(keyword, '\" 키워드가 자주 사용됨')\n            });\n        });\n        // 카테고리 기반 태그 생성\n        const categories = this.detectCategories(content);\n        categories.forEach((category)=>{\n            mockTags.push({\n                tag: category,\n                confidence: Math.random() * 0.3 + 0.7,\n                reason: '문서 내용이 \"'.concat(category, '\" 카테고리에 해당함')\n            });\n        });\n        return mockTags.sort((a, b)=>b.confidence - a.confidence);\n    }\n    // 의미론적 검색 (Mock 구현)\n    async semanticSearch(query, documents) {\n        const results = [];\n        documents.forEach((doc)=>{\n            const relevanceScore = this.calculateRelevance(query, doc);\n            if (relevanceScore > 0.1) {\n                results.push({\n                    ...doc,\n                    relevanceScore,\n                    matchedTerms: this.findMatchedTerms(query, doc)\n                });\n            }\n        });\n        return results.sort((a, b)=>b.relevanceScore - a.relevanceScore);\n    }\n    // 문서 요약 생성\n    async generateSummary(content) {\n        // Mock 구현 - 실제로는 AI API 사용\n        const sentences = content.split(/[.!?]+/).filter((s)=>s.trim().length > 10);\n        const summary = sentences.slice(0, 2).join('. ');\n        return summary + (sentences.length > 2 ? '...' : '');\n    }\n    // 종합적인 문서 AI 분석\n    async analyzeDocument(document, allDocuments) {\n        const content = \"\".concat(document.title, \" \").concat(document.description);\n        // AI 친화도 평가\n        const aiFriendlinessScore = await this.evaluateAIFriendliness(document);\n        // 자동 태그 생성\n        const suggestedTags = await this.generateTags(content, document.title);\n        // 문서 관계 분석\n        const relationships = await this.analyzeDocumentRelationships(document, allDocuments);\n        // 주제 추출\n        const topics = await this.extractTopics(content);\n        // 감정 분석\n        const sentiment = await this.analyzeSentiment(content);\n        // 개선 제안 생성\n        const improvements = await this.generateImprovements(document, aiFriendlinessScore, suggestedTags);\n        return {\n            aiFriendlinessScore,\n            suggestedTags,\n            relationships,\n            improvements,\n            topics,\n            sentiment\n        };\n    }\n    // AI 친화도 평가\n    async evaluateAIFriendliness(document) {\n        var _document_metadata, _document_metadata1;\n        let score = 0;\n        // Frontmatter 완성도 (30점)\n        if ((_document_metadata = document.metadata) === null || _document_metadata === void 0 ? void 0 : _document_metadata.author) score += 10;\n        if (document.tags && document.tags.length > 0) score += 10;\n        if (document.description && document.description.length > 10) score += 10;\n        // 구조화 수준 (30점)\n        if (document.title && document.title.length > 5) score += 15;\n        if (document.description && document.description.includes('.')) score += 15;\n        // 내용 명확성 (20점)\n        if (document.description && document.description.length > 50) score += 10;\n        if (((_document_metadata1 = document.metadata) === null || _document_metadata1 === void 0 ? void 0 : _document_metadata1.wordCount) && document.metadata.wordCount > 100) score += 10;\n        // 태그 및 관계 (20점)\n        if (document.tags && document.tags.length >= 3) score += 10;\n        if (document.tags && document.tags.length >= 5) score += 10;\n        return Math.min(score, 100);\n    }\n    // 주제 추출\n    async extractTopics(content) {\n        const topics = [];\n        const text = content.toLowerCase();\n        // 기술 주제\n        if (text.includes('react') || text.includes('nextjs')) topics.push('React/Next.js');\n        if (text.includes('typescript') || text.includes('javascript')) topics.push('JavaScript/TypeScript');\n        if (text.includes('api') || text.includes('rest')) topics.push('API 개발');\n        if (text.includes('database') || text.includes('db')) topics.push('데이터베이스');\n        if (text.includes('ai') || text.includes('machine learning')) topics.push('AI/ML');\n        // 도메인 주제\n        if (text.includes('설치') || text.includes('setup')) topics.push('환경 설정');\n        if (text.includes('배포') || text.includes('deploy')) topics.push('배포');\n        if (text.includes('테스트') || text.includes('test')) topics.push('테스팅');\n        if (text.includes('보안') || text.includes('security')) topics.push('보안');\n        if (text.includes('성능') || text.includes('performance')) topics.push('성능 최적화');\n        return topics.slice(0, 5) // 최대 5개 주제\n        ;\n    }\n    // 감정 분석\n    async analyzeSentiment(content) {\n        const text = content.toLowerCase();\n        const positiveWords = [\n            '좋다',\n            '훌륭',\n            '완벽',\n            '성공',\n            '효과적',\n            '쉽다',\n            '빠르다',\n            '안정적'\n        ];\n        const negativeWords = [\n            '문제',\n            '오류',\n            '실패',\n            '어렵다',\n            '느리다',\n            '불안정',\n            '복잡'\n        ];\n        const positiveCount = positiveWords.filter((word)=>text.includes(word)).length;\n        const negativeCount = negativeWords.filter((word)=>text.includes(word)).length;\n        if (positiveCount > negativeCount) return 'positive';\n        if (negativeCount > positiveCount) return 'negative';\n        return 'neutral';\n    }\n    // 개선 제안 생성\n    async generateImprovements(document, aiScore, suggestedTags) {\n        var _document_metadata;\n        const improvements = [];\n        if (aiScore < 70) {\n            var _document_metadata1;\n            if (!((_document_metadata1 = document.metadata) === null || _document_metadata1 === void 0 ? void 0 : _document_metadata1.author)) {\n                improvements.push('작성자 정보를 추가하여 신뢰성을 높이세요');\n            }\n            if (!document.tags || document.tags.length < 3) {\n                improvements.push('더 많은 태그를 추가하여 검색 가능성을 높이세요');\n            }\n            if (!document.description || document.description.length < 50) {\n                improvements.push('문서 설명을 더 자세히 작성하여 이해도를 높이세요');\n            }\n        }\n        if (suggestedTags.length > 0) {\n            improvements.push(\"\".concat(suggestedTags.length, \"개의 AI 추천 태그를 적용해보세요\"));\n        }\n        if (((_document_metadata = document.metadata) === null || _document_metadata === void 0 ? void 0 : _document_metadata.wordCount) && document.metadata.wordCount < 100) {\n            improvements.push('문서 내용을 더 풍부하게 작성해보세요');\n        }\n        if (!document.description || !document.description.includes('.')) {\n            improvements.push('문서 설명에 완전한 문장을 사용해보세요');\n        }\n        return improvements.slice(0, 4) // 최대 4개 제안\n        ;\n    }\n    // 문서 관계 분석 (개별 문서용)\n    async analyzeDocumentRelationships(document, allDocuments) {\n        const relationships = [];\n        for (const otherDoc of allDocuments){\n            if (otherDoc.id === document.id) continue;\n            const similarity = this.calculateSimilarity(document, otherDoc);\n            if (similarity > 0.3) {\n                relationships.push({\n                    target: otherDoc.title,\n                    relationship: this.determineRelationship(document, otherDoc),\n                    strength: similarity\n                });\n            }\n        }\n        return relationships.slice(0, 3) // 최대 3개 관계만 표시\n        ;\n    }\n    // 문서 관계 분석 (전체 문서용)\n    async analyzeAllDocumentRelationships(documents) {\n        const relationships = [];\n        for(let i = 0; i < documents.length; i++){\n            for(let j = i + 1; j < documents.length; j++){\n                const doc1 = documents[i];\n                const doc2 = documents[j];\n                const similarity = this.calculateSimilarity(doc1, doc2);\n                if (similarity > 0.3) {\n                    relationships.push({\n                        source: doc1.title,\n                        target: doc2.title,\n                        relationship: this.determineRelationship(doc1, doc2),\n                        strength: similarity\n                    });\n                }\n            }\n        }\n        return relationships;\n    }\n    // 키워드 추출 (Mock)\n    extractKeywords(text) {\n        const words = text.toLowerCase().replace(/[^\\w\\s가-힣]/g, ' ').split(/\\s+/).filter((word)=>word.length > 2);\n        const wordCount = new Map();\n        words.forEach((word)=>{\n            wordCount.set(word, (wordCount.get(word) || 0) + 1);\n        });\n        return Array.from(wordCount.entries()).filter((param)=>{\n            let [_, count] = param;\n            return count > 1;\n        }).sort((param, param1)=>{\n            let [, a] = param, [, b] = param1;\n            return b - a;\n        }).slice(0, 5).map((param)=>{\n            let [word, _] = param;\n            return word;\n        });\n    }\n    // 카테고리 감지 (Mock)\n    detectCategories(content) {\n        const categories = [];\n        const text = content.toLowerCase();\n        if (text.includes('api') || text.includes('endpoint') || text.includes('rest')) {\n            categories.push('API');\n        }\n        if (text.includes('설치') || text.includes('setup') || text.includes('환경')) {\n            categories.push('설치');\n        }\n        if (text.includes('문서') || text.includes('documentation') || text.includes('가이드')) {\n            categories.push('문서');\n        }\n        if (text.includes('프로젝트') || text.includes('project') || text.includes('개요')) {\n            categories.push('프로젝트');\n        }\n        if (text.includes('개발') || text.includes('development') || text.includes('코드')) {\n            categories.push('개발');\n        }\n        return categories;\n    }\n    // 관련성 계산 (Mock)\n    calculateRelevance(query, doc) {\n        const queryTerms = query.toLowerCase().split(/\\s+/);\n        let score = 0;\n        // 제목 매칭 (높은 가중치)\n        queryTerms.forEach((term)=>{\n            if (doc.title.toLowerCase().includes(term)) {\n                score += 0.4;\n            }\n            if (doc.description.toLowerCase().includes(term)) {\n                score += 0.2;\n            }\n            if (doc.tags.some((tag)=>tag.toLowerCase().includes(term))) {\n                score += 0.3;\n            }\n        });\n        return Math.min(score, 1.0);\n    }\n    // 매칭된 용어 찾기\n    findMatchedTerms(query, doc) {\n        const queryTerms = query.toLowerCase().split(/\\s+/);\n        const matchedTerms = [];\n        queryTerms.forEach((term)=>{\n            if (doc.title.toLowerCase().includes(term) || doc.description.toLowerCase().includes(term) || doc.tags.some((tag)=>tag.toLowerCase().includes(term))) {\n                matchedTerms.push(term);\n            }\n        });\n        return matchedTerms;\n    }\n    // 문서 유사도 계산\n    calculateSimilarity(doc1, doc2) {\n        // 태그 유사도\n        const tags1 = new Set(doc1.tags);\n        const tags2 = new Set(doc2.tags);\n        const commonTags = Array.from(tags1).filter((tag)=>tags2.has(tag));\n        const tagSimilarity = commonTags.length / Math.max(tags1.size, tags2.size);\n        // 제목 유사도 (간단한 문자열 유사도)\n        const titleSimilarity = this.stringSimilarity(doc1.title, doc2.title);\n        return tagSimilarity * 0.6 + titleSimilarity * 0.4;\n    }\n    // 문자열 유사도 계산 (간단한 구현)\n    stringSimilarity(str1, str2) {\n        const words1 = str1.toLowerCase().split(/\\s+/);\n        const words2 = str2.toLowerCase().split(/\\s+/);\n        const commonWords = words1.filter((word)=>words2.includes(word));\n        return commonWords.length / Math.max(words1.length, words2.length);\n    }\n    // 관계 유형 결정\n    determineRelationship(doc1, doc2) {\n        const tags1 = new Set(doc1.tags);\n        const tags2 = new Set(doc2.tags);\n        const commonTags = Array.from(tags1).filter((tag)=>tags2.has(tag));\n        if (commonTags.includes('API') && commonTags.includes('문서')) {\n            return 'API 문서 관계';\n        }\n        if (commonTags.includes('설치') && commonTags.includes('개발')) {\n            return '개발 환경 관계';\n        }\n        if (commonTags.includes('프로젝트') && commonTags.includes('문서')) {\n            return '프로젝트 문서 관계';\n        }\n        return '관련 문서';\n    }\n    constructor(apiKey){\n        this.apiKey = null;\n        this.apiKey = apiKey || null;\n    }\n}\n// 싱글톤 인스턴스\nconst aiService = new AIService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/ai-service.ts\n"));

/***/ })

});